{"type":"data","nodes":[null,{"type":"data","data":[{"slug":1,"post":2},"hello-world",{"datePublished":3,"dateModified":3,"title":4,"description":5,"tags":6,"coverImage":14,"slug":1,"html":17,"nextPost":18},"2021-04-10","Hello World!","Following the ancient traditions of software engineers..",[7,8,9,10,11,12,13],"typescript","tailwind","vite","nextjs","gatsby","hello world","blogging",{"src":15,"alt":16},"\u002Fblog\u002Fhello-world.png","Hello world in TypeScript","\u003Cp\u003E\u003Cem\u003EIs this real life, or is this just fantasyâ€¦\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Cfigure\u003E\n  \u003Cimg src=\"\u002Fblog\u002Fhello-world.png\" alt=\"Hello world in TypeScript.\" loading=\"lazy\"\u002F\u003E\n  \u003Cfigcaption\u003E\n    A timeless classic.\n  \u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\u003Cp\u003E\u003Cdiv class=\"table-of-contents\"\u003E\u003Ch2\u003ETable of Contents\u003C\u002Fh2\u003E\u003Col\u003E\u003Cli\u003E\u003Ca href=\"#in-the-beginning\"\u003EIn the beginning\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#2-years-later\"\u003E2 years later\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#tailwind\"\u003ETailwind\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#1-year-later\"\u003E1 year later\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003C\u002Fdiv\u003E\u003C\u002Fp\u003E\n\u003Ch2 id=\"in-the-beginning\" tabindex=\"-1\"\u003EIn the beginning\u003C\u002Fh2\u003E\n\u003Cp\u003EOnce upon a time I started making myself a blog. This was probably 2017, canâ€™t remember exactly. In my first attempt I used Jekyll which felt just a little too restricting to customize and unfamiliar with its Ruby to me. Same with Hugo even though in my both attempts I \u003Cstrong\u003Ecould\u003C\u002Fstrong\u003E have made a decent blog in no time. &lt;Sigh&gt; I guess I \u003Cem\u003Ehad to\u003C\u002Fem\u003E do it the hard way and make my own custom dingy-wingy website with the coolest tools available at the time. Which in 2018 was Gatsby, TypeScript and Styled Components. All so exciting and new at the time.\u003C\u002Fp\u003E\n\u003Cp\u003EYet well, it was not exactly a piece of cake to write a blog from scratch with those tools. While I knew TypeScript and Styled Components fairly well, Gatsby was somewhat fickly beast that at the time was also very new and alas, had many interesting edge-cases. Through shedding blood and maybe a few tears, I managed to assemble a working site but there is something to be said about polishing and fine-tuning things. I could have shipped the first version and been quite happy with it, yet I decided to keep on fine-tuning it and adding little things that didnâ€™t matter to anyone except me.\u003C\u002Fp\u003E\n\u003Cp\u003EI guess it is a type of analysis paralysis where you get so tunnel-visioned working out some details right when you should instead switch gears and start making content - the thing you were excited to do in the first place! Oh well.\u003C\u002Fp\u003E\n\u003Cp\u003EDuring this epic journey I even went as far as to author my own SEO library just to modularize and archive some of the knowledge I accumulated during this process: \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FTeemuKoivisto\u002Freact-seo-meta-tags\" rel=\"noopener\"\u003Ereact-seo-meta-tags\u003C\u002Fa\u003E. Now why would one even spend a disproportionately large amount of time making a \u003Cem\u003ESEO\u003C\u002Fem\u003E library for a site with basically no readers or users? Hmm. A good question ðŸ¤”. Moving onâ€¦\u003C\u002Fp\u003E\n\u003Cp\u003EBasically what the library was and still is intended to encapsulate all the basic SEO meta tags into one nice and compact form that makes it easier to follow best SEO practices without having to waste too much time researching them by yourself.\u003C\u002Fp\u003E\n\u003Cp\u003EHowever, SEO wasnâ€™t even the most annoying part of this project. While Gatsby pioneered the static React site generation, well-suited for blogs, it had a few pecularities involving its approach. What made me question my sanity a few times was the absolute maze of configuring Gatsbyâ€™s \u003Ccode class=\"language-text\"\u003Egatsby-node.js\u003C\u002Fcode\u003E and \u003Ccode class=\"language-text\"\u003Egatsby-config.js\u003C\u002Fcode\u003E files and debugging GraphQL queries. The idea is great, composable pipelines and plugins, yey! But in practise there was just too many leaks that would have made it enjoyable. Add in the mix GraphQL which is another bulky beast to tame, especially when dealing with static files. \u003Cstrong\u003EStatic files\u003C\u002Fstrong\u003E. Do you really care about overfetching static files which you \u003Cstrong\u003EA)\u003C\u002Fstrong\u003E have to parse in full in the first place and \u003Cstrong\u003EB)\u003C\u002Fstrong\u003E are processed into static HTML.\u003C\u002Fp\u003E\n\u003Cp\u003EOne of the fun bugs I encountered was a linting issue where you had to add an empty \u003Ccode class=\"language-text\"\u003E.eslintrc\u003C\u002Fcode\u003E to the root of the project to prevent Gatsby from linting a locally linked libraryâ€™s source code. Another nice one was the ordering of the \u003Ccode class=\"language-text\"\u003Egatsby-google-analytics\u003C\u002Fcode\u003E plugin. You had to have it in a specific order in relation to the other plugins and I got so frustrated with it, that I switched to another GA plugin. Aaand the parsing of the markdown data with the images seemed to be more of an arcane incantation than software engineering. The darn images would sometimes not reload yet adding a console.log statement, if I recall correctly, somehow made it work (Iâ€™m still extremely puzzled by that one).\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003Eimage about exploding brain\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Cp\u003EWell, enough about that. Did I mention that I originally also wrote an AWS stack for this whole app? With S3 bucket, edge lambdas and a CloudFront distribution. And, God forbid, CSP rules applied by an edge lambda. Now if you are not familiar with edge lambdas they do not exactly work always the way you want them to. Namely deploying and updating them, at least the last time I tried, were major hurdles to do automatically. Itâ€™s not possible to automatically deploy the new edge lambda version but you have to increment it \u003Cem\u003Emanually\u003C\u002Fem\u003E after which you can set the version number for the CF distribution. Things you do to just to make a blogâ€¦\u003C\u002Fp\u003E\n\u003Ch2 id=\"2-years-later\" tabindex=\"-1\"\u003E2 years later\u003C\u002Fh2\u003E\n\u003Cp\u003ESo anyway, the whole thing became quite a drag and I never really finished this thing to the level I wanted it to. Also I went apparently half-insane writing my first content here which didnâ€™t seem to fit the tone of a professional website intended to showcase my immeasurable programming talents. Writing interesting content is always nice but I think I should have another venue for pure ranting rather than technical articles.\u003C\u002Fp\u003E\n\u003Cp\u003EAfter letting this site languish for two years, I finally had a good programming groove to tackle it once more with a new, more pragmatic angle. Also I wanted to trial two new fascinating technologies, Next.js and TailwindCSS that seemed quite promising.\u003C\u002Fp\u003E\n\u003Cp\u003EWhy? Well, from my experience with Next.js it does seem and feel less magical way of deploying static sites with React where you, the programmer, can work with a lot more suitable set of primitives and abstractions compared to the magical soup of Gatsby. I donâ€™t mean to start gang-banging on Gatsby here, itâ€™s a fine tool but Iâ€™ve definitely felt a lot less pain with Next.js.\u003C\u002Fp\u003E\n\u003Cp\u003EFor example, to render the markdown into HTML you basically write the reading logic by yourself using any tool you like, for example \u003Ccode class=\"language-text\"\u003Eremark\u003C\u002Fcode\u003E, and use plugins that you may desire. Gatsby does this (almost) behind the scenes yet because it was configured with one, very error prone file of \u003Ccode class=\"language-text\"\u003Egatsby-node.js\u003C\u002Fcode\u003E, in a generation step that wasnâ€™t exactly quick the feedback loop wasnâ€™t that great. Also Vercel, the company behind Next.js, has a nice variety of boilerplate projects in Github that showcase very useful libraries integrated with Next.js.\u003C\u002Fp\u003E\n\u003Cp\u003EOne other that Next.js seemed to have done better, at least the last time I checked, was the deployment. Of course, Gatsby has been catching up Next.js on this but I think Next.js is still far ahead. And compared to the AWS deployment deploying to Vercel seemed almost criminally easy (almost as if no pain indicates nothing of value was done). One thing where I feel Gatsby is still better, having rewrote this site from Gatsby to Next.js, is the image optimizations and the high-quality plugins for some markdown stuff at least (such as autolinking headers). But I think Next.js is closing that gap but definitely itâ€™s nice to have such vibrant innovation on this area!\u003C\u002Fp\u003E\n\u003Ch2 id=\"tailwind\" tabindex=\"-1\"\u003ETailwind\u003C\u002Fh2\u003E\n\u003Cp\u003EThe another new library that I wanted to learn was and still is Tailwind, an atomic set of CSS utility classes provided in a nice, structured form. I had my doubts about it, and still do, but Tailwind has proven to me that with a smaller, opinionated API for CSS developers can produce elegant UI designs much quicker. Tailwind isnâ€™t necessarily a tool to style your JSX components but a design system to organize your styles in a much more compact form. Without enforcing the encapsulation of the styles around JSX components like styled-components do, Tailwind is much closer to writing inline CSS that, as you might imagine, can appear quite messy to an outsider.\u003C\u002Fp\u003E\n\u003Cp\u003EYet itâ€™s the efficiency of writing those styles that in the end separates Tailwind from other CSS libraries or tools. Working with CSS directly, many developers get the insatiable feeling of wanting to tune a few details here and there to their heartâ€™s desire. Which is fine to learn CSS but isnâ€™t necessarily the most productive way to produce nice UIs. Tailwind has some limitations to it, certainly, such as having no built-in way of adding :before or :after elements. Yet it navigates through its downsides very remarkably and makes a difficult problem (styling web pages) seem almost trivial. And you can organize your classes with lint rules and so forth.\u003C\u002Fp\u003E\n\u003Cp\u003EWell, enough of praising. Itâ€™s not the tools that make a good programmer but how you use them. Anyone can make terrible code with even the most sophisticated tools but itâ€™s the self-discipline of avoiding doing too much and too little, that is the balance that only experience can make a good programmer.\u003C\u002Fp\u003E\n\u003Cp\u003ETo compare the Gatsby site to this version, the Gatsby version took maybe monthâ€™s worth of work to create it. This site took perhaps a weekâ€™s worth of work. Of course, I was able to use basically the same layout and avoid a lot of the designing of the UI. But still I would it was much nicer and quicker to work with Next.js and StyledComponents\u002FSCSS. Sometimes itâ€™s not a bad idea to invest in researching and learning some promising tools to speed up your development routines that you are already very comfortable with. Shaking things up definitely keeps things interesting.\u003C\u002Fp\u003E\n\u003Cp\u003EHohhoijaa. So what next? Maybe another blog post. Maybe Iâ€™ll finally get to actually writing new stuff instead of rewriting the same projects all over again.\u003C\u002Fp\u003E\n\u003Cp\u003EWhile this setup currently is (probably) the most hipstery way of launching personal blogs that isnâ€™t completely esoteric, I probably wonâ€™t rewrite this in a veery long time. Time is limited. Our lives last merely a fraction in the timespan of the universe. Do I \u003Cstrong\u003Ereally\u003C\u002Fstrong\u003E want to spend my limited existence redoing something Iâ€™ve already done before? I would rather just hang out in my underwear and drink beer. That at least wouldnâ€™t require one more style fix to satisfy my OCD.\u003C\u002Fp\u003E\n\u003Ch2 id=\"1-year-later\" tabindex=\"-1\"\u003E1 year later\u003C\u002Fh2\u003E\n\u003Cp\u003EIâ€™m not really sure why I last time stopped xx when I was so close to the finish line. I kinda recall that I, as a silly xxx, I tried to add as a final thing Google Analytics which seemed to have killed off my motivation to get xx. And who can blame me, that piece of crap is one soul-sucking piece of bloated UI that is as useful\u003C\u002Fp\u003E\n",{"datePublished":19,"dateModified":19,"title":20,"description":21,"tags":22,"slug":29},"2021-04-16","Footnotes","Do they work?",[23,24,25,26,27,28],"broscience","rage","random","another tag","how many I need?","one more to see if this thing overfloats","another-post"],"uses":{"params":["slug"]}}]}